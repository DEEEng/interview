import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as l,b as n,e as a,t,o}from"./app-Cw3dfNnn.js";const c={};function r(e,s){return o(),i("div",null,[s[8]||(s[8]=l(`<h1 id="vue2基础知识点总结" tabindex="-1"><a class="header-anchor" href="#vue2基础知识点总结"><span>Vue2基础知识点总结</span></a></h1><h2 id="_01-初识vue" tabindex="-1"><a class="header-anchor" href="#_01-初识vue"><span>01_初识Vue</span></a></h2><h3 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h3><ul><li><strong>Vue实例创建</strong>：必须创建一个Vue实例，且要传入一个配置对象</li><li><strong>容器与实例关系</strong>：Vue实例和容器是一一对应的</li><li><strong>Vue模板</strong>：root容器里的代码被称为Vue模板，符合html规范但混入了特殊的Vue语法</li><li><strong>插值语法</strong>：<code>{{xxx}}</code>中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性</li><li><strong>响应式</strong>：一旦data中的数据发生改变，页面中用到该数据的地方也会自动更新</li></ul><h3 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span>基本语法</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#demo&#39;</span><span class="token punctuation">,</span> <span class="token comment">// el用于指定当前Vue实例为哪个容器服务</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token comment">// data中用于存储数据，数据供el所指定的容器去使用</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;atguigu&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">address</span><span class="token operator">:</span><span class="token string">&#39;北京&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="重要区别" tabindex="-1"><a class="header-anchor" href="#重要区别"><span>重要区别</span></a></h3><ul><li><strong>js表达式</strong>：会产生一个值，可以放在任何需要值的地方（如：a、a+b、demo(1)、x === y ? &#39;a&#39; : &#39;b&#39;）</li><li><strong>js代码(语句)</strong>：如if(){}、for(){}</li></ul><h2 id="_02-vue模板语法" tabindex="-1"><a class="header-anchor" href="#_02-vue模板语法"><span>02_Vue模板语法</span></a></h2><h3 id="两大类模板语法" tabindex="-1"><a class="header-anchor" href="#两大类模板语法"><span>两大类模板语法</span></a></h3><h4 id="_1-插值语法" tabindex="-1"><a class="header-anchor" href="#_1-插值语法"><span>1. 插值语法</span></a></h4><ul><li><strong>功能</strong>：用于解析标签体内容</li><li><strong>写法</strong>：<code>{{xxx}}</code>，xxx是js表达式，且可以直接读取到data中的所有属性</li></ul><h4 id="_2-指令语法" tabindex="-1"><a class="header-anchor" href="#_2-指令语法"><span>2. 指令语法</span></a></h4><ul><li><strong>功能</strong>：用于解析标签（包括：标签属性、标签体内容、绑定事件等）</li><li><strong>举例</strong>：<code>v-bind:href=&quot;xxx&quot;</code> 或简写为 <code>:href=&quot;xxx&quot;</code></li><li><strong>特点</strong>：Vue中有很多指令，形式都是：<code>v-????</code></li></ul><h3 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h3><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 插值语法 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>你好，{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 指令语法 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>school.url.toUpperCase()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点我去{{school.name}}学习1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>school.url<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点我去{{school.name}}学习2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_03-数据绑定" tabindex="-1"><a class="header-anchor" href="#_03-数据绑定"><span>03_数据绑定</span></a></h2><h3 id="两种数据绑定方式" tabindex="-1"><a class="header-anchor" href="#两种数据绑定方式"><span>两种数据绑定方式</span></a></h3><h4 id="_1-单向绑定-v-bind" tabindex="-1"><a class="header-anchor" href="#_1-单向绑定-v-bind"><span>1. 单向绑定(v-bind)</span></a></h4><ul><li><strong>特点</strong>：数据只能从data流向页面</li><li><strong>写法</strong>：<code>v-bind:value=&quot;name&quot;</code> 或简写为 <code>:value=&quot;name&quot;</code></li></ul><h4 id="_2-双向绑定-v-model" tabindex="-1"><a class="header-anchor" href="#_2-双向绑定-v-model"><span>2. 双向绑定(v-model)</span></a></h4><ul><li><strong>特点</strong>：数据不仅能从data流向页面，还可以从页面流向data</li><li><strong>适用</strong>：一般都应用在表单类元素上（如：input、select等）</li><li><strong>简写</strong>：<code>v-model:value</code> 可以简写为 <code>v-model</code>，因为v-model默认收集的就是value值</li></ul><h3 id="示例代码-1" tabindex="-1"><a class="header-anchor" href="#示例代码-1"><span>示例代码</span></a></h3><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 单向数据绑定 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 双向数据绑定 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_04-el与data的两种写法" tabindex="-1"><a class="header-anchor" href="#_04-el与data的两种写法"><span>04_el与data的两种写法</span></a></h2><h3 id="el的两种写法" tabindex="-1"><a class="header-anchor" href="#el的两种写法"><span>el的两种写法</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 第一种写法</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;尚硅谷&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 第二种写法</span>
<span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;尚硅谷&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
v<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="data的两种写法" tabindex="-1"><a class="header-anchor" href="#data的两种写法"><span>data的两种写法</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 第一种写法：对象式</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;尚硅谷&#39;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 第二种写法：函数式</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;@@@&#39;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// 此处的this是Vue实例对象</span>
        <span class="token keyword">return</span><span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;尚硅谷&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="重要原则" tabindex="-1"><a class="header-anchor" href="#重要原则"><span>重要原则</span></a></h3><ul><li>由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了</li></ul><h2 id="_05-mvvm模型" tabindex="-1"><a class="header-anchor" href="#_05-mvvm模型"><span>05_MVVM模型</span></a></h2><h3 id="mvvm模型组成" tabindex="-1"><a class="header-anchor" href="#mvvm模型组成"><span>MVVM模型组成</span></a></h3><ul><li><strong>M：模型(Model)</strong>：data中的数据</li><li><strong>V：视图(View)</strong>：模板代码</li><li><strong>VM：视图模型(ViewModel)</strong>：Vue实例</li></ul><h3 id="重要观察" tabindex="-1"><a class="header-anchor" href="#重要观察"><span>重要观察</span></a></h3><ol><li>data中所有的属性，最后都出现在了vm身上</li><li>vm身上所有的属性及Vue原型上所有属性，在Vue模板中都可以直接使用</li></ol><h3 id="示例代码-2" tabindex="-1"><a class="header-anchor" href="#示例代码-2"><span>示例代码</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;尚硅谷&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">address</span><span class="token operator">:</span><span class="token string">&#39;北京&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_06-数据代理" tabindex="-1"><a class="header-anchor" href="#_06-数据代理"><span>06_数据代理</span></a></h2><h3 id="object-defineproperty方法" tabindex="-1"><a class="header-anchor" href="#object-defineproperty方法"><span>Object.defineProperty方法</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">18</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token comment">// value:18,</span>
    <span class="token comment">// enumerable:true, // 控制属性是否可以枚举，默认值是false</span>
    <span class="token comment">// writable:true, // 控制属性是否可以被修改，默认值是false</span>
    <span class="token comment">// configurable:true // 控制属性是否可以被删除，默认值是false</span>

    <span class="token comment">// 当有人读取person的age属性时，get函数(getter)就会被调用</span>
    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;有人读取age属性了&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> number
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment">// 当有人修改person的age属性时，set函数(setter)就会被调用</span>
    <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;有人修改了age属性，且值是&#39;</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>
        number <span class="token operator">=</span> value
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据代理概念" tabindex="-1"><a class="header-anchor" href="#数据代理概念"><span>数据代理概念</span></a></h3><ul><li><strong>定义</strong>：通过一个对象代理对另一个对象中属性的操作（读/写）</li></ul><h3 id="vue中的数据代理" tabindex="-1"><a class="header-anchor" href="#vue中的数据代理"><span>Vue中的数据代理</span></a></h3><ol><li><strong>Vue中的数据代理</strong>：通过vm对象来代理data对象中属性的操作（读/写）</li><li><strong>好处</strong>：更加方便的操作data中的数据</li><li><strong>基本原理</strong>： <ul><li>通过Object.defineProperty()把data对象中所有属性添加到vm上</li><li>为每一个添加到vm上的属性，都指定一个getter/setter</li><li>在getter/setter内部去操作（读/写）data中对应的属性</li></ul></li></ol><h2 id="_07-事件处理" tabindex="-1"><a class="header-anchor" href="#_07-事件处理"><span>07_事件处理</span></a></h2><h3 id="事件的基本使用" tabindex="-1"><a class="header-anchor" href="#事件的基本使用"><span>事件的基本使用</span></a></h3><ol><li>使用<code>v-on:xxx</code> 或 <code>@xxx</code> 绑定事件，其中xxx是事件名</li><li>事件的回调需要配置在methods对象中，最终会在vm上</li><li>methods中配置的函数，不要用箭头函数！否则this就不是vm了</li><li>methods中配置的函数，都是被Vue所管理的函数，this的指向是vm或组件实例对象</li><li><code>@click=&quot;demo&quot;</code> 和 <code>@click=&quot;demo($event)&quot;</code> 效果一致，但后者可以传参</li></ol><h3 id="事件修饰符" tabindex="-1"><a class="header-anchor" href="#事件修饰符"><span>事件修饰符</span></a></h3><ol><li><strong>prevent</strong>：阻止默认事件（常用）</li><li><strong>stop</strong>：阻止事件冒泡（常用）</li><li><strong>once</strong>：事件只触发一次（常用）</li><li><strong>capture</strong>：使用事件的捕获模式</li><li><strong>self</strong>：只有event.target是当前操作的元素时才触发事件</li><li><strong>passive</strong>：事件的默认行为立即执行，无需等待事件回调执行完毕</li></ol><h3 id="键盘事件" tabindex="-1"><a class="header-anchor" href="#键盘事件"><span>键盘事件</span></a></h3><h4 id="vue中常用的按键别名" tabindex="-1"><a class="header-anchor" href="#vue中常用的按键别名"><span>Vue中常用的按键别名</span></a></h4><ul><li>回车 =&gt; enter</li><li>删除 =&gt; delete (捕获&quot;删除&quot;和&quot;退格&quot;键)</li><li>退出 =&gt; esc</li><li>空格 =&gt; space</li><li>换行 =&gt; tab (特殊，必须配合keydown去使用)</li><li>上 =&gt; up、下 =&gt; down、左 =&gt; left、右 =&gt; right</li></ul><h4 id="系统修饰键" tabindex="-1"><a class="header-anchor" href="#系统修饰键"><span>系统修饰键</span></a></h4><ul><li><strong>ctrl、alt、shift、meta</strong></li><li>配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发</li><li>配合keydown使用：正常触发事件</li></ul><h4 id="自定义按键别名" tabindex="-1"><a class="header-anchor" href="#自定义按键别名"><span>自定义按键别名</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>keyCodes<span class="token punctuation">.</span>自定义键名 <span class="token operator">=</span> 键码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_08-计算属性" tabindex="-1"><a class="header-anchor" href="#_08-计算属性"><span>08_计算属性</span></a></h2><h3 id="计算属性定义" tabindex="-1"><a class="header-anchor" href="#计算属性定义"><span>计算属性定义</span></a></h3><ul><li><strong>定义</strong>：要用的属性不存在，要通过已有属性计算得来</li><li><strong>原理</strong>：底层借助了Object.defineProperty方法提供的getter和setter</li></ul><h3 id="get函数执行时机" tabindex="-1"><a class="header-anchor" href="#get函数执行时机"><span>get函数执行时机</span></a></h3><ol><li>初次读取时会执行一次</li><li>当依赖的数据发生改变时会被再次调用</li></ol><h3 id="优势" tabindex="-1"><a class="header-anchor" href="#优势"><span>优势</span></a></h3><ul><li>与methods实现相比，内部有缓存机制（复用），效率更高，调试方便</li></ul><h3 id="备注" tabindex="-1"><a class="header-anchor" href="#备注"><span>备注</span></a></h3><ol><li>计算属性最终会出现在vm上，直接读取使用即可</li><li>如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变</li></ol><h3 id="示例代码-3" tabindex="-1"><a class="header-anchor" href="#示例代码-3"><span>示例代码</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">fullName</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token comment">// get有什么作用？当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</span>
        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;get被调用了&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// set什么时候调用? 当fullName被修改时</span>
        <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;set&#39;</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>
            <span class="token keyword">const</span> arr <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 简写（不考虑修改时）</span>
<span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;get被调用了&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_09-监视属性" tabindex="-1"><a class="header-anchor" href="#_09-监视属性"><span>09_监视属性</span></a></h2><h3 id="监视属性watch" tabindex="-1"><a class="header-anchor" href="#监视属性watch"><span>监视属性watch</span></a></h3><ol><li>当被监视的属性变化时，回调函数自动调用，进行相关操作</li><li>监视的属性必须存在，才能进行监视</li><li>监视的两种写法： <ul><li>new Vue时传入watch配置</li><li>通过vm.$watch监视</li></ul></li></ol><h3 id="深度监视" tabindex="-1"><a class="header-anchor" href="#深度监视"><span>深度监视</span></a></h3><ol><li>Vue中的watch默认不监测对象内部值的改变（一层）</li><li>配置deep:true可以监测对象内部值改变（多层）</li><li>Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以</li><li>使用watch时根据数据的具体结构，决定是否采用深度监视</li></ol><h3 id="computed和watch的区别" tabindex="-1"><a class="header-anchor" href="#computed和watch的区别"><span>computed和watch的区别</span></a></h3><ol><li>computed能完成的功能，watch都可以完成</li><li>watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作</li></ol><h3 id="两个重要的小原则" tabindex="-1"><a class="header-anchor" href="#两个重要的小原则"><span>两个重要的小原则</span></a></h3><ol><li>所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm或组件实例对象</li><li>所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成箭头函数，这样this的指向才是vm或组件实例对象</li></ol><h3 id="示例代码-4" tabindex="-1"><a class="header-anchor" href="#示例代码-4"><span>示例代码</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">watch</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">isHot</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">immediate</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 初始化时让handler调用一下</span>
        <span class="token literal-property property">deep</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 深度监视</span>
        <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;isHot被修改了&#39;</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 简写（不需要深度监测和immediate时）</span>
<span class="token literal-property property">watch</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token function">isHot</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;isHot被修改了&#39;</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-绑定样式" tabindex="-1"><a class="header-anchor" href="#_10-绑定样式"><span>10_绑定样式</span></a></h2><h3 id="class样式绑定" tabindex="-1"><a class="header-anchor" href="#class样式绑定"><span>class样式绑定</span></a></h3><h4 id="字符串写法" tabindex="-1"><a class="header-anchor" href="#字符串写法"><span>字符串写法</span></a></h4><ul><li><strong>适用于</strong>：类名不确定，要动态获取</li><li><strong>写法</strong>：<code>:class=&quot;mood&quot;</code></li></ul><h4 id="数组写法" tabindex="-1"><a class="header-anchor" href="#数组写法"><span>数组写法</span></a></h4><ul><li><strong>适用于</strong>：要绑定多个样式，个数不确定，名字也不确定</li><li><strong>写法</strong>：<code>:class=&quot;classArr&quot;</code></li></ul><h4 id="对象写法" tabindex="-1"><a class="header-anchor" href="#对象写法"><span>对象写法</span></a></h4><ul><li><strong>适用于</strong>：要绑定多个样式，个数确定，名字也确定，但要动态决定用不用</li><li><strong>写法</strong>：<code>:class=&quot;classObj&quot;</code></li></ul><h3 id="style样式绑定" tabindex="-1"><a class="header-anchor" href="#style样式绑定"><span>style样式绑定</span></a></h3><h4 id="对象写法-1" tabindex="-1"><a class="header-anchor" href="#对象写法-1"><span>对象写法</span></a></h4><ul><li><strong>写法</strong>：<code>:style=&quot;{fontSize: xxx}&quot;</code>，其中xxx是动态值</li></ul><h4 id="数组写法-1" tabindex="-1"><a class="header-anchor" href="#数组写法-1"><span>数组写法</span></a></h4><ul><li><strong>写法</strong>：<code>:style=&quot;[a,b]&quot;</code>，其中a、b是样式对象</li></ul><h3 id="示例代码-5" tabindex="-1"><a class="header-anchor" href="#示例代码-5"><span>示例代码</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">mood</span><span class="token operator">:</span><span class="token string">&#39;normal&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">classArr</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;atguigu1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;atguigu2&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;atguigu3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">classObj</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">atguigu1</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">atguigu2</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">styleObj</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">&#39;40px&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">styleArr</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">&#39;40px&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token literal-property property">backgroundColor</span><span class="token operator">:</span><span class="token string">&#39;gray&#39;</span><span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-条件渲染" tabindex="-1"><a class="header-anchor" href="#_11-条件渲染"><span>11_条件渲染</span></a></h2><h3 id="v-if" tabindex="-1"><a class="header-anchor" href="#v-if"><span>v-if</span></a></h3><ul><li><strong>写法</strong>： <ul><li><code>v-if=&quot;表达式&quot;</code></li><li><code>v-else-if=&quot;表达式&quot;</code></li><li><code>v-else=&quot;表达式&quot;</code></li></ul></li><li><strong>适用于</strong>：切换频率较低的场景</li><li><strong>特点</strong>：不展示的DOM元素直接被移除</li><li><strong>注意</strong>：v-if可以和v-else-if、v-else一起使用，但要求结构不能被&quot;打断&quot;</li></ul><h3 id="v-show" tabindex="-1"><a class="header-anchor" href="#v-show"><span>v-show</span></a></h3><ul><li><strong>写法</strong>：<code>v-show=&quot;表达式&quot;</code></li><li><strong>适用于</strong>：切换频率较高的场景</li><li><strong>特点</strong>：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</li></ul><h3 id="备注-1" tabindex="-1"><a class="header-anchor" href="#备注-1"><span>备注</span></a></h3><ul><li>使用v-if时，元素可能无法获取到，而使用v-show一定可以获取到</li><li>v-if与template的配合使用</li></ul><h2 id="_12-列表渲染" tabindex="-1"><a class="header-anchor" href="#_12-列表渲染"><span>12_列表渲染</span></a></h2><h3 id="v-for指令" tabindex="-1"><a class="header-anchor" href="#v-for指令"><span>v-for指令</span></a></h3><ol><li><strong>用于</strong>：展示列表数据</li><li><strong>语法</strong>：<code>v-for=&quot;(item, index) in xxx&quot; :key=&quot;yyy&quot;</code></li><li><strong>可遍历</strong>：数组、对象、字符串（用的很少）、指定次数（用的很少）</li></ol><h3 id="key的作用-重要面试题" tabindex="-1"><a class="header-anchor" href="#key的作用-重要面试题"><span>key的作用（重要面试题）</span></a></h3><h4 id="虚拟dom中key的作用" tabindex="-1"><a class="header-anchor" href="#虚拟dom中key的作用"><span>虚拟DOM中key的作用</span></a></h4><ul><li>key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】</li><li>随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较</li></ul><h4 id="对比规则" tabindex="-1"><a class="header-anchor" href="#对比规则"><span>对比规则</span></a></h4><ol><li><p><strong>旧虚拟DOM中找到了与新虚拟DOM相同的key</strong>：</p><ul><li>若虚拟DOM中内容没变，直接使用之前的真实DOM</li><li>若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li></ul></li><li><p><strong>旧虚拟DOM中未找到与新虚拟DOM相同的key</strong>：</p><ul><li>创建新的真实DOM，随后渲染到页面</li></ul></li></ol><h4 id="用index作为key可能会引发的问题" tabindex="-1"><a class="header-anchor" href="#用index作为key可能会引发的问题"><span>用index作为key可能会引发的问题</span></a></h4><ol><li>若对数据进行：逆序添加、逆序删除等破坏顺序操作：会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题，但效率低</li><li>如果结构中还包含输入类的DOM：会产生错误DOM更新 ==&gt; 界面有问题</li></ol><h4 id="开发中如何选择key" tabindex="-1"><a class="header-anchor" href="#开发中如何选择key"><span>开发中如何选择key</span></a></h4><ol><li>最好使用每条数据的唯一标识作为key，比如id、手机号、身份证号、学号等唯一值</li><li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的</li></ol><h3 id="列表过滤和排序" tabindex="-1"><a class="header-anchor" href="#列表过滤和排序"><span>列表过滤和排序</span></a></h3><ul><li>用watch实现</li><li>用computed实现（推荐）</li></ul><h3 id="vue监测数据的原理" tabindex="-1"><a class="header-anchor" href="#vue监测数据的原理"><span>Vue监测数据的原理</span></a></h3><h4 id="监测对象中的数据" tabindex="-1"><a class="header-anchor" href="#监测对象中的数据"><span>监测对象中的数据</span></a></h4><ul><li>通过setter实现监视，且要在new Vue时就传入要监测的数据</li><li>对象中后追加的属性，Vue默认不做响应式处理</li><li>如需给后添加的属性做响应式，请使用如下API： <ul><li><code>Vue.set(target，propertyName/index，value)</code></li><li><code>vm.$set(target，propertyName/index，value)</code></li></ul></li></ul><h4 id="监测数组中的数据" tabindex="-1"><a class="header-anchor" href="#监测数组中的数据"><span>监测数组中的数据</span></a></h4><ul><li>通过包裹数组更新元素的方法实现，本质就是做了两件事： <ol><li>调用原生对应的方法对数组进行更新</li><li>重新解析模板，进而更新页面</li></ol></li></ul><h4 id="在vue修改数组中的某个元素一定要用如下方法" tabindex="-1"><a class="header-anchor" href="#在vue修改数组中的某个元素一定要用如下方法"><span>在Vue修改数组中的某个元素一定要用如下方法</span></a></h4><ol><li>使用这些API：push()、pop()、shift()、unshift()、splice()、sort()、reverse()</li><li>Vue.set() 或 vm.$set()</li></ol><h4 id="特别注意" tabindex="-1"><a class="header-anchor" href="#特别注意"><span>特别注意</span></a></h4><ul><li>Vue.set() 和 vm.$set() 不能给vm或vm的根数据对象添加属性</li></ul><h2 id="_13-收集表单数据" tabindex="-1"><a class="header-anchor" href="#_13-收集表单数据"><span>13_收集表单数据</span></a></h2><h3 id="不同表单元素的数据收集" tabindex="-1"><a class="header-anchor" href="#不同表单元素的数据收集"><span>不同表单元素的数据收集</span></a></h3><h4 id="input-type-text" tabindex="-1"><a class="header-anchor" href="#input-type-text"><span><code>&lt;input type=&quot;text&quot;/&gt;</code></span></a></h4><ul><li>v-model收集的是value值，用户输入的就是value值</li></ul><h4 id="input-type-radio" tabindex="-1"><a class="header-anchor" href="#input-type-radio"><span><code>&lt;input type=&quot;radio&quot;/&gt;</code></span></a></h4><ul><li>v-model收集的是value值，且要给标签配置value值</li></ul><h4 id="input-type-checkbox" tabindex="-1"><a class="header-anchor" href="#input-type-checkbox"><span><code>&lt;input type=&quot;checkbox&quot;/&gt;</code></span></a></h4><ol><li>没有配置input的value属性，那么收集的就是checked（勾选or未勾选，是布尔值）</li><li>配置input的value属性： <ul><li>v-model的初始值是非数组，那么收集的就是checked（勾选or未勾选，是布尔值）</li><li>v-model的初始值是数组，那么收集的就是value组成的数组</li></ul></li></ol><h3 id="v-model的三个修饰符" tabindex="-1"><a class="header-anchor" href="#v-model的三个修饰符"><span>v-model的三个修饰符</span></a></h3><ul><li><strong>lazy</strong>：失去焦点再收集数据</li><li><strong>number</strong>：输入字符串转为有效的数字</li><li><strong>trim</strong>：输入首尾空格过滤</li></ul><h2 id="_14-过滤器" tabindex="-1"><a class="header-anchor" href="#_14-过滤器"><span>14_过滤器</span></a></h2><h3 id="过滤器定义" tabindex="-1"><a class="header-anchor" href="#过滤器定义"><span>过滤器定义</span></a></h3><ul><li><strong>定义</strong>：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）</li></ul><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><ol><li><strong>注册过滤器</strong>：<code>Vue.filter(name,callback)</code> 或 <code>new Vue{filters:{}}</code></li><li><strong>使用过滤器</strong>：<code>{{ xxx | 过滤器名}}</code> 或 <code>v-bind:属性 = &quot;xxx | 过滤器名&quot;</code></li></ol><h3 id="备注-2" tabindex="-1"><a class="header-anchor" href="#备注-2"><span>备注</span></a></h3><ol><li>过滤器也可以接收额外参数、多个过滤器也可以串联</li><li>并没有改变原本的数据，是产生新的对应的数据</li></ol><h3 id="示例代码-6" tabindex="-1"><a class="header-anchor" href="#示例代码-6"><span>示例代码</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 全局过滤器</span>
Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">&#39;mySlice&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 局部过滤器</span>
<span class="token literal-property property">filters</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token function">timeFormater</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>str<span class="token operator">=</span><span class="token string">&#39;YYYY年MM月DD日 HH:mm:ss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">dayjs</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15-内置指令" tabindex="-1"><a class="header-anchor" href="#_15-内置指令"><span>15_内置指令</span></a></h2><h3 id="我们学过的指令" tabindex="-1"><a class="header-anchor" href="#我们学过的指令"><span>我们学过的指令</span></a></h3><ul><li><strong>v-bind</strong>：单向绑定解析表达式，可简写为 :xxx</li><li><strong>v-model</strong>：双向数据绑定</li><li><strong>v-for</strong>：遍历数组/对象/字符串</li><li><strong>v-on</strong>：绑定事件监听，可简写为@</li><li><strong>v-if</strong>：条件渲染（动态控制节点是否存在）</li><li><strong>v-else</strong>：条件渲染（动态控制节点是否存在）</li><li><strong>v-show</strong>：条件渲染（动态控制节点是否展示）</li></ul><h3 id="v-text指令" tabindex="-1"><a class="header-anchor" href="#v-text指令"><span>v-text指令</span></a></h3>`,147)),n("ol",null,[s[1]||(s[1]=n("li",null,[n("strong",null,"作用"),a("：向其所在的节点中渲染文本内容")],-1)),n("li",null,[s[0]||(s[0]=n("strong",null,"与插值语法的区别",-1)),a("：v-text会替换掉节点中的内容，"+t(e.xx)+"则不会",1)])]),s[9]||(s[9]=n("h3",{id:"v-html指令",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#v-html指令"},[n("span",null,"v-html指令")])],-1)),n("ol",null,[s[5]||(s[5]=n("li",null,[n("strong",null,"作用"),a("：向指定节点中渲染包含html结构的内容")],-1)),n("li",null,[s[3]||(s[3]=n("strong",null,"与插值语法的区别",-1)),s[4]||(s[4]=a("： ")),n("ul",null,[n("li",null,"v-html会替换掉节点中所有的内容，"+t(e.xx)+"则不会",1),s[2]||(s[2]=n("li",null,"v-html可以识别html结构",-1))])]),s[6]||(s[6]=n("li",null,[n("strong",null,"严重注意"),a("：v-html有安全性问题！ "),n("ul",null,[n("li",null,"在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击"),n("li",null,"一定要在可信的内容上使用v-html，永不要用在用户提交的内容上")])],-1))]),s[10]||(s[10]=n("h3",{id:"v-cloak指令",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#v-cloak指令"},[n("span",null,"v-cloak指令")])],-1)),n("ol",null,[s[7]||(s[7]=n("li",null,[n("strong",null,"本质"),a("：是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性")],-1)),n("li",null,[n("strong",null,"使用css配合v-cloak可以解决网速慢时页面展示出"+t(e.xxx)+"的问题",1)])]),s[11]||(s[11]=l(`<h3 id="v-once指令" tabindex="-1"><a class="header-anchor" href="#v-once指令"><span>v-once指令</span></a></h3><ol><li>v-once所在节点在初次动态渲染后，就视为静态内容了</li><li>以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能</li></ol><h3 id="v-pre指令" tabindex="-1"><a class="header-anchor" href="#v-pre指令"><span>v-pre指令</span></a></h3><ol><li><strong>跳过其所在节点的编译过程</strong></li><li><strong>可利用它跳过</strong>：没有使用指令语法、没有使用插值语法的节点，会加快编译</li></ol><h2 id="_16-自定义指令" tabindex="-1"><a class="header-anchor" href="#_16-自定义指令"><span>16_自定义指令</span></a></h2><h3 id="定义语法" tabindex="-1"><a class="header-anchor" href="#定义语法"><span>定义语法</span></a></h3><h4 id="局部指令" tabindex="-1"><a class="header-anchor" href="#局部指令"><span>局部指令</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">directives</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">指令名</span><span class="token operator">:</span>配置对象<span class="token punctuation">}</span>   <span class="token comment">// 或   directives{指令名:回调函数}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="全局指令" tabindex="-1"><a class="header-anchor" href="#全局指令"><span>全局指令</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span>指令名<span class="token punctuation">,</span>配置对象<span class="token punctuation">)</span> <span class="token comment">// 或   Vue.directive(指令名,回调函数)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="配置对象中常用的3个回调" tabindex="-1"><a class="header-anchor" href="#配置对象中常用的3个回调"><span>配置对象中常用的3个回调</span></a></h3><ol><li><strong>bind</strong>：指令与元素成功绑定时调用</li><li><strong>inserted</strong>：指令所在元素被插入页面时调用</li><li><strong>update</strong>：指令所在模板结构被重新解析时调用</li></ol><h3 id="备注-3" tabindex="-1"><a class="header-anchor" href="#备注-3"><span>备注</span></a></h3><ol><li>指令定义时不加v-，但使用时要加v-</li><li>指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名</li></ol><h3 id="示例代码-7" tabindex="-1"><a class="header-anchor" href="#示例代码-7"><span>示例代码</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">directives</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token comment">// 函数式</span>
    <span class="token function">big</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        element<span class="token punctuation">.</span>innerText <span class="token operator">=</span> binding<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">10</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 对象式</span>
    <span class="token literal-property property">fbind</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            element<span class="token punctuation">.</span>value <span class="token operator">=</span> binding<span class="token punctuation">.</span>value
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">inserted</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            element<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            element<span class="token punctuation">.</span>value <span class="token operator">=</span> binding<span class="token punctuation">.</span>value
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_17-生命周期" tabindex="-1"><a class="header-anchor" href="#_17-生命周期"><span>17_生命周期</span></a></h2><h3 id="生命周期定义" tabindex="-1"><a class="header-anchor" href="#生命周期定义"><span>生命周期定义</span></a></h3><ol><li><strong>又名</strong>：生命周期回调函数、生命周期函数、生命周期钩子</li><li><strong>是什么</strong>：Vue在关键时刻帮我们调用的一些特殊名称的函数</li><li><strong>生命周期函数的名字不可更改</strong>，但函数的具体内容是程序员根据需求编写的</li><li><strong>生命周期函数中的this指向是vm或组件实例对象</strong></li></ol><h3 id="常用的生命周期钩子" tabindex="-1"><a class="header-anchor" href="#常用的生命周期钩子"><span>常用的生命周期钩子</span></a></h3><ol><li><strong>mounted</strong>：发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】</li><li><strong>beforeDestroy</strong>：清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】</li></ol><h3 id="关于销毁vue实例" tabindex="-1"><a class="header-anchor" href="#关于销毁vue实例"><span>关于销毁Vue实例</span></a></h3><ol><li>销毁后借助Vue开发者工具看不到任何信息</li><li>销毁后自定义事件会失效，但原生DOM事件依然有效</li><li>一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了</li></ol><h3 id="生命周期钩子" tabindex="-1"><a class="header-anchor" href="#生命周期钩子"><span>生命周期钩子</span></a></h3><ul><li><strong>beforeCreate</strong>：数据监测、数据代理创建之前</li><li><strong>created</strong>：数据监测、数据代理创建之后</li><li><strong>beforeMount</strong>：页面呈现的是未经Vue编译的DOM结构</li><li><strong>mounted</strong>：页面中呈现的是经过Vue编译的DOM，对DOM的操作均有效（尽可能避免）</li><li><strong>beforeUpdate</strong>：数据是新的，但页面是旧的，页面尚未和数据保持同步</li><li><strong>updated</strong>：数据是新的，页面也是新的，页面和数据保持同步</li><li><strong>beforeDestroy</strong>：vm中所有的data、methods、指令等等，都处于可用状态，马上要执行销毁过程</li><li><strong>destroyed</strong>：完全销毁</li></ul><h2 id="_18-非单文件组件" tabindex="-1"><a class="header-anchor" href="#_18-非单文件组件"><span>18_非单文件组件</span></a></h2><h3 id="vue中使用组件的三大步骤" tabindex="-1"><a class="header-anchor" href="#vue中使用组件的三大步骤"><span>Vue中使用组件的三大步骤</span></a></h3><ol><li><strong>定义组件(创建组件)</strong></li><li><strong>注册组件</strong></li><li><strong>使用组件(写组件标签)</strong></li></ol><h3 id="如何定义一个组件" tabindex="-1"><a class="header-anchor" href="#如何定义一个组件"><span>如何定义一个组件</span></a></h3><ul><li>使用<code>Vue.extend(options)</code>创建，其中options和new Vue(options)时传入的那个options几乎一样，但也有点区别： <ol><li><strong>el不要写</strong>，为什么？——— 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器</li><li><strong>data必须写成函数</strong>，为什么？———— 避免组件被复用时，数据存在引用关系</li></ol></li><li><strong>备注</strong>：使用template可以配置组件结构</li></ul><h3 id="如何注册组件" tabindex="-1"><a class="header-anchor" href="#如何注册组件"><span>如何注册组件</span></a></h3><ol><li><strong>局部注册</strong>：靠new Vue的时候传入components选项</li><li><strong>全局注册</strong>：靠Vue.component(&#39;组件名&#39;,组件)</li></ol><h3 id="编写组件标签" tabindex="-1"><a class="header-anchor" href="#编写组件标签"><span>编写组件标签</span></a></h3><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>school</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>school</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="几个注意点" tabindex="-1"><a class="header-anchor" href="#几个注意点"><span>几个注意点</span></a></h3><ol><li><p><strong>关于组件名</strong>：</p><ul><li>一个单词组成：首字母小写：school，首字母大写：School</li><li>多个单词组成：kebab-case命名：my-school，CamelCase命名：MySchool（需要Vue脚手架支持）</li><li>组件名尽可能回避HTML中已有的元素名称</li><li>可以使用name配置项指定组件在开发者工具中呈现的名字</li></ul></li><li><p><strong>关于组件标签</strong>：</p><ul><li>第一种写法：<code>&lt;school&gt;&lt;/school&gt;</code></li><li>第二种写法：<code>&lt;school/&gt;</code></li><li>备注：不用脚手架时，<code>&lt;school/&gt;</code>会导致后续组件不能渲染</li></ul></li><li><p><strong>一个简写方式</strong>：</p><ul><li><code>const school = Vue.extend(options)</code> 可简写为：<code>const school = options</code></li></ul></li></ol><h3 id="关于vuecomponent" tabindex="-1"><a class="header-anchor" href="#关于vuecomponent"><span>关于VueComponent</span></a></h3><ol><li>school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的</li><li>我们只需要写<code>&lt;school/&gt;</code>或<code>&lt;school&gt;&lt;/school&gt;</code>，Vue解析时会帮我们创建school组件的实例对象，即Vue帮我们执行的：new VueComponent(options)</li><li>特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent</li><li>关于this指向： <ul><li>组件配置中：data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】</li><li>new Vue(options)配置中：data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】</li></ul></li><li>VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象），Vue的实例对象，以后简称vm</li></ol><h3 id="一个重要的内置关系" tabindex="-1"><a class="header-anchor" href="#一个重要的内置关系"><span>一个重要的内置关系</span></a></h3><ol><li>一个重要的内置关系：<code>VueComponent.prototype.__proto__ === Vue.prototype</code></li><li>为什么要有这个关系：让组件实例对象（vc）可以访问到Vue原型上的属性、方法</li></ol><h2 id="_19-单文件组件" tabindex="-1"><a class="header-anchor" href="#_19-单文件组件"><span>19_单文件组件</span></a></h2><h3 id="单文件组件结构" tabindex="-1"><a class="header-anchor" href="#单文件组件结构"><span>单文件组件结构</span></a></h3><p>一个.vue文件包含三个部分：</p><h4 id="template标签" tabindex="-1"><a class="header-anchor" href="#template标签"><span>template标签</span></a></h4><ul><li>组件的结构</li></ul><h4 id="script标签" tabindex="-1"><a class="header-anchor" href="#script标签"><span>script标签</span></a></h4><ul><li>组件交互相关的代码（数据、方法等等）</li></ul><h4 id="style标签" tabindex="-1"><a class="header-anchor" href="#style标签"><span>style标签</span></a></h4><ul><li>组件的样式</li></ul><h3 id="示例代码-8" tabindex="-1"><a class="header-anchor" href="#示例代码-8"><span>示例代码</span></a></h3><h4 id="school-vue" tabindex="-1"><a class="header-anchor" href="#school-vue"><span>School.vue</span></a></h4><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>学校名称：{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>学校地址：{{address}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点我提示学校名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;School&#39;</span><span class="token punctuation">,</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;尚硅谷&#39;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">address</span><span class="token operator">:</span><span class="token string">&#39;北京昌平&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token selector">.demo</span><span class="token punctuation">{</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="app-vue" tabindex="-1"><a class="header-anchor" href="#app-vue"><span>App.vue</span></a></h4><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>School</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>School</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Student</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">//引入组件</span>
    <span class="token keyword">import</span> School <span class="token keyword">from</span> <span class="token string">&#39;./School.vue&#39;</span>
    <span class="token keyword">import</span> Student <span class="token keyword">from</span> <span class="token string">&#39;./Student.vue&#39;</span>

    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>
            School<span class="token punctuation">,</span>
            Student
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="main-js" tabindex="-1"><a class="header-anchor" href="#main-js"><span>main.js</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>

<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;App&gt;&lt;/App&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>App<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li>单文件组件需要脚手架支持</li><li>组件化开发的基础</li><li>便于维护和复用</li><li>结构清晰，职责分明</li></ul><hr><h2 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h2><p>这份Vue2基础知识点总结涵盖了从Vue的基本概念到组件化开发的完整学习路径。每个知识点都包含了核心概念、使用方法、注意事项和示例代码，是学习Vue2的完整参考资料。</p><p>通过这19个章节的学习，可以掌握：</p><ul><li>Vue的基本语法和概念</li><li>数据绑定和事件处理</li><li>计算属性和监视属性</li><li>条件渲染和列表渲染</li><li>样式绑定和表单处理</li><li>指令的使用和自定义</li><li>组件化开发思想</li><li>Vue的生命周期</li></ul><p>这些知识点为进一步学习Vue的高级特性和Vue3打下了坚实的基础。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div>`,65))])}const k=p(c,[["render",r],["__file","Vue2-basics.html.vue"]]),v=JSON.parse('{"path":"/interview/Vue2/Vue2-basics.html","title":"Vue2基础知识点总结","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"01_初识Vue","slug":"_01-初识vue","link":"#_01-初识vue","children":[{"level":3,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[]},{"level":3,"title":"基本语法","slug":"基本语法","link":"#基本语法","children":[]},{"level":3,"title":"重要区别","slug":"重要区别","link":"#重要区别","children":[]}]},{"level":2,"title":"02_Vue模板语法","slug":"_02-vue模板语法","link":"#_02-vue模板语法","children":[{"level":3,"title":"两大类模板语法","slug":"两大类模板语法","link":"#两大类模板语法","children":[]},{"level":3,"title":"示例代码","slug":"示例代码","link":"#示例代码","children":[]}]},{"level":2,"title":"03_数据绑定","slug":"_03-数据绑定","link":"#_03-数据绑定","children":[{"level":3,"title":"两种数据绑定方式","slug":"两种数据绑定方式","link":"#两种数据绑定方式","children":[]},{"level":3,"title":"示例代码","slug":"示例代码-1","link":"#示例代码-1","children":[]}]},{"level":2,"title":"04_el与data的两种写法","slug":"_04-el与data的两种写法","link":"#_04-el与data的两种写法","children":[{"level":3,"title":"el的两种写法","slug":"el的两种写法","link":"#el的两种写法","children":[]},{"level":3,"title":"data的两种写法","slug":"data的两种写法","link":"#data的两种写法","children":[]},{"level":3,"title":"重要原则","slug":"重要原则","link":"#重要原则","children":[]}]},{"level":2,"title":"05_MVVM模型","slug":"_05-mvvm模型","link":"#_05-mvvm模型","children":[{"level":3,"title":"MVVM模型组成","slug":"mvvm模型组成","link":"#mvvm模型组成","children":[]},{"level":3,"title":"重要观察","slug":"重要观察","link":"#重要观察","children":[]},{"level":3,"title":"示例代码","slug":"示例代码-2","link":"#示例代码-2","children":[]}]},{"level":2,"title":"06_数据代理","slug":"_06-数据代理","link":"#_06-数据代理","children":[{"level":3,"title":"Object.defineProperty方法","slug":"object-defineproperty方法","link":"#object-defineproperty方法","children":[]},{"level":3,"title":"数据代理概念","slug":"数据代理概念","link":"#数据代理概念","children":[]},{"level":3,"title":"Vue中的数据代理","slug":"vue中的数据代理","link":"#vue中的数据代理","children":[]}]},{"level":2,"title":"07_事件处理","slug":"_07-事件处理","link":"#_07-事件处理","children":[{"level":3,"title":"事件的基本使用","slug":"事件的基本使用","link":"#事件的基本使用","children":[]},{"level":3,"title":"事件修饰符","slug":"事件修饰符","link":"#事件修饰符","children":[]},{"level":3,"title":"键盘事件","slug":"键盘事件","link":"#键盘事件","children":[]}]},{"level":2,"title":"08_计算属性","slug":"_08-计算属性","link":"#_08-计算属性","children":[{"level":3,"title":"计算属性定义","slug":"计算属性定义","link":"#计算属性定义","children":[]},{"level":3,"title":"get函数执行时机","slug":"get函数执行时机","link":"#get函数执行时机","children":[]},{"level":3,"title":"优势","slug":"优势","link":"#优势","children":[]},{"level":3,"title":"备注","slug":"备注","link":"#备注","children":[]},{"level":3,"title":"示例代码","slug":"示例代码-3","link":"#示例代码-3","children":[]}]},{"level":2,"title":"09_监视属性","slug":"_09-监视属性","link":"#_09-监视属性","children":[{"level":3,"title":"监视属性watch","slug":"监视属性watch","link":"#监视属性watch","children":[]},{"level":3,"title":"深度监视","slug":"深度监视","link":"#深度监视","children":[]},{"level":3,"title":"computed和watch的区别","slug":"computed和watch的区别","link":"#computed和watch的区别","children":[]},{"level":3,"title":"两个重要的小原则","slug":"两个重要的小原则","link":"#两个重要的小原则","children":[]},{"level":3,"title":"示例代码","slug":"示例代码-4","link":"#示例代码-4","children":[]}]},{"level":2,"title":"10_绑定样式","slug":"_10-绑定样式","link":"#_10-绑定样式","children":[{"level":3,"title":"class样式绑定","slug":"class样式绑定","link":"#class样式绑定","children":[]},{"level":3,"title":"style样式绑定","slug":"style样式绑定","link":"#style样式绑定","children":[]},{"level":3,"title":"示例代码","slug":"示例代码-5","link":"#示例代码-5","children":[]}]},{"level":2,"title":"11_条件渲染","slug":"_11-条件渲染","link":"#_11-条件渲染","children":[{"level":3,"title":"v-if","slug":"v-if","link":"#v-if","children":[]},{"level":3,"title":"v-show","slug":"v-show","link":"#v-show","children":[]},{"level":3,"title":"备注","slug":"备注-1","link":"#备注-1","children":[]}]},{"level":2,"title":"12_列表渲染","slug":"_12-列表渲染","link":"#_12-列表渲染","children":[{"level":3,"title":"v-for指令","slug":"v-for指令","link":"#v-for指令","children":[]},{"level":3,"title":"key的作用（重要面试题）","slug":"key的作用-重要面试题","link":"#key的作用-重要面试题","children":[]},{"level":3,"title":"列表过滤和排序","slug":"列表过滤和排序","link":"#列表过滤和排序","children":[]},{"level":3,"title":"Vue监测数据的原理","slug":"vue监测数据的原理","link":"#vue监测数据的原理","children":[]}]},{"level":2,"title":"13_收集表单数据","slug":"_13-收集表单数据","link":"#_13-收集表单数据","children":[{"level":3,"title":"不同表单元素的数据收集","slug":"不同表单元素的数据收集","link":"#不同表单元素的数据收集","children":[]},{"level":3,"title":"v-model的三个修饰符","slug":"v-model的三个修饰符","link":"#v-model的三个修饰符","children":[]}]},{"level":2,"title":"14_过滤器","slug":"_14-过滤器","link":"#_14-过滤器","children":[{"level":3,"title":"过滤器定义","slug":"过滤器定义","link":"#过滤器定义","children":[]},{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"备注","slug":"备注-2","link":"#备注-2","children":[]},{"level":3,"title":"示例代码","slug":"示例代码-6","link":"#示例代码-6","children":[]}]},{"level":2,"title":"15_内置指令","slug":"_15-内置指令","link":"#_15-内置指令","children":[{"level":3,"title":"我们学过的指令","slug":"我们学过的指令","link":"#我们学过的指令","children":[]},{"level":3,"title":"v-text指令","slug":"v-text指令","link":"#v-text指令","children":[]},{"level":3,"title":"v-html指令","slug":"v-html指令","link":"#v-html指令","children":[]},{"level":3,"title":"v-cloak指令","slug":"v-cloak指令","link":"#v-cloak指令","children":[]},{"level":3,"title":"v-once指令","slug":"v-once指令","link":"#v-once指令","children":[]},{"level":3,"title":"v-pre指令","slug":"v-pre指令","link":"#v-pre指令","children":[]}]},{"level":2,"title":"16_自定义指令","slug":"_16-自定义指令","link":"#_16-自定义指令","children":[{"level":3,"title":"定义语法","slug":"定义语法","link":"#定义语法","children":[]},{"level":3,"title":"配置对象中常用的3个回调","slug":"配置对象中常用的3个回调","link":"#配置对象中常用的3个回调","children":[]},{"level":3,"title":"备注","slug":"备注-3","link":"#备注-3","children":[]},{"level":3,"title":"示例代码","slug":"示例代码-7","link":"#示例代码-7","children":[]}]},{"level":2,"title":"17_生命周期","slug":"_17-生命周期","link":"#_17-生命周期","children":[{"level":3,"title":"生命周期定义","slug":"生命周期定义","link":"#生命周期定义","children":[]},{"level":3,"title":"常用的生命周期钩子","slug":"常用的生命周期钩子","link":"#常用的生命周期钩子","children":[]},{"level":3,"title":"关于销毁Vue实例","slug":"关于销毁vue实例","link":"#关于销毁vue实例","children":[]},{"level":3,"title":"生命周期钩子","slug":"生命周期钩子","link":"#生命周期钩子","children":[]}]},{"level":2,"title":"18_非单文件组件","slug":"_18-非单文件组件","link":"#_18-非单文件组件","children":[{"level":3,"title":"Vue中使用组件的三大步骤","slug":"vue中使用组件的三大步骤","link":"#vue中使用组件的三大步骤","children":[]},{"level":3,"title":"如何定义一个组件","slug":"如何定义一个组件","link":"#如何定义一个组件","children":[]},{"level":3,"title":"如何注册组件","slug":"如何注册组件","link":"#如何注册组件","children":[]},{"level":3,"title":"编写组件标签","slug":"编写组件标签","link":"#编写组件标签","children":[]},{"level":3,"title":"几个注意点","slug":"几个注意点","link":"#几个注意点","children":[]},{"level":3,"title":"关于VueComponent","slug":"关于vuecomponent","link":"#关于vuecomponent","children":[]},{"level":3,"title":"一个重要的内置关系","slug":"一个重要的内置关系","link":"#一个重要的内置关系","children":[]}]},{"level":2,"title":"19_单文件组件","slug":"_19-单文件组件","link":"#_19-单文件组件","children":[{"level":3,"title":"单文件组件结构","slug":"单文件组件结构","link":"#单文件组件结构","children":[]},{"level":3,"title":"示例代码","slug":"示例代码-8","link":"#示例代码-8","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}],"git":{"createdTime":1753164176000,"updatedTime":1753164176000,"contributors":[{"name":"三月崽崽","email":"1745786806@qq.com","commits":1}]},"readingTime":{"minutes":18.02,"words":5406},"filePathRelative":"interview/Vue2/Vue2-basics.md","localizedDate":"2025年7月22日"}');export{k as comp,v as data};
