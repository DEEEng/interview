import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,b as n,e as s,d as r,r as d,o as c}from"./app-Cw3dfNnn.js";const i={},l={href:"https://cn.vuejs.org/v2/guide/render-function.html#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"};function h(u,e){const p=d("ExternalLinkIcon");return c(),t("div",null,[e[2]||(e[2]=a('<h1 id="使用key" tabindex="-1"><a class="header-anchor" href="#使用key"><span>使用key</span></a></h1><p>对于通过循环生成的列表，应给每个列表项一个稳定且唯一的key，这有利于在列表变动时，尽量少的删除、新增、改动元素</p><h1 id="使用冻结的对象" tabindex="-1"><a class="header-anchor" href="#使用冻结的对象"><span>使用冻结的对象</span></a></h1><p>冻结的对象不会被响应化</p><h1 id="使用函数式组件" tabindex="-1"><a class="header-anchor" href="#使用函数式组件"><span>使用函数式组件</span></a></h1>',5)),n("p",null,[e[1]||(e[1]=s("参见")),n("a",l,[e[0]||(e[0]=s("函数式组件")),r(p)])]),e[3]||(e[3]=a(`<h1 id="使用计算属性" tabindex="-1"><a class="header-anchor" href="#使用计算属性"><span>使用计算属性</span></a></h1><p>如果模板中某个数据会使用多次，并且该数据是通过计算得到的，使用计算属性以缓存它们</p><h1 id="非实时绑定的表单项" tabindex="-1"><a class="header-anchor" href="#非实时绑定的表单项"><span>非实时绑定的表单项</span></a></h1><p>当使用<code>v-model</code>绑定一个表单项时，当用户改变表单项的状态时，也会随之改变数据，从而导致<code>vue</code>发生重渲染（<code>rerender</code>），这会带来一些性能的开销。</p><p>特别是当用户改变表单项时，页面有一些动画正在进行中，由于JS执行线程和浏览器渲染线程是互斥的，最终会导致动画出现卡顿。</p><p>我们可以通过使用<code>lazy</code>或不使用<code>v-model</code>的方式解决该问题，但要注意，这样可能会导致在某一个时间段内数据和表单项的值是不一致的。</p><h1 id="保持对象引用稳定" tabindex="-1"><a class="header-anchor" href="#保持对象引用稳定"><span>保持对象引用稳定</span></a></h1><p>在绝大部分情况下，<code>vue</code>触发<code>rerender</code>的时机是其依赖的数据发生<strong>变化</strong></p><p>若数据没有发生变化，哪怕给数据重新赋值了，<code>vue</code>也是不会做出任何处理的</p><p>下面是<code>vue</code>判断数据<strong>没有变化</strong>的源码</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// value 为旧值， newVal 为新值</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">===</span> value <span class="token operator">||</span> <span class="token punctuation">(</span>newVal <span class="token operator">!==</span> newVal <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，如果需要，只要能保证组件的依赖数据不发生变化，组件就不会重新渲染。</p><p>对于原始数据类型，保持其值不变即可</p><p>对于对象类型，保持其引用不变即可</p><p>从另一方面来说，由于可以通过保持属性引用稳定来避免子组件的重渲染，那么我们应该细分组件来尽量避免多余的渲染</p><h1 id="使用v-show替代v-if" tabindex="-1"><a class="header-anchor" href="#使用v-show替代v-if"><span>使用v-show替代v-if</span></a></h1><p>对于频繁切换显示状态的元素，使用v-show可以保证虚拟dom树的稳定，避免频繁的新增和删除元素，特别是对于那些内部包含大量dom元素的节点，这一点极其重要</p><p>关键字：频繁切换显示状态、内部包含大量dom元素</p><h1 id="使用延迟装载-defer" tabindex="-1"><a class="header-anchor" href="#使用延迟装载-defer"><span>使用延迟装载（defer）</span></a></h1><p>首页白屏时间主要受到两个因素的影响：</p><ul><li><p>打包体积过大</p><p>巨型包需要消耗大量的传输时间，导致JS传输完成前页面只有一个<code>&lt;div&gt;</code>，没有可显示的内容</p></li><li><p>需要立即渲染的内容太多</p><p>JS传输完成后，浏览器开始执行JS构造页面。</p><p>但可能一开始要渲染的组件太多，不仅JS执行的时间很长，而且执行完后浏览器要渲染的元素过多，从而导致页面白屏</p></li></ul><p>打包体积过大需要自行优化打包体积，本节不予讨论</p><p>本节仅讨论渲染内容太多的问题。</p><p>一个可行的办法就是<strong>延迟装载组件</strong>，让组件按照指定的先后顺序依次一个一个渲染出来</p><blockquote><p>延迟装载是一个思路，本质上就是利用<code>requestAnimationFrame</code>事件分批渲染内容，它的具体实现多种多样</p></blockquote><h1 id="使用keep-alive" tabindex="-1"><a class="header-anchor" href="#使用keep-alive"><span>使用keep-alive</span></a></h1><p>后续讲解</p><h1 id="长列表优化" tabindex="-1"><a class="header-anchor" href="#长列表优化"><span>长列表优化</span></a></h1><p>后续讲解</p>`,29))])}const k=o(i,[["render",h],["__file","12. 优化.html.vue"]]),f=JSON.parse('{"path":"/interview/Vue/12.%20%E4%BC%98%E5%8C%96.html","title":"使用key","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"createdTime":1753164176000,"updatedTime":1753164176000,"contributors":[{"name":"三月崽崽","email":"1745786806@qq.com","commits":1}]},"readingTime":{"minutes":2.98,"words":895},"filePathRelative":"interview/Vue/12. 优化.md","localizedDate":"2025年7月22日"}');export{k as comp,f as data};
