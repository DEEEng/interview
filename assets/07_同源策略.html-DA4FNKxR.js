import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as r,o as a}from"./app-Cw3dfNnn.js";const o={};function i(p,t){return a(),e("div",null,t[0]||(t[0]=[r('<p>浏览器有一个重要的安全策略，称之为「同源策略」</p><p>其中，$源=协议+主机+端口$，两个源相同，称之为同源，两个源不同，称之为跨源或跨域</p><p>比如：</p><table><thead><tr><th>源 1</th><th>源 2</th><th>是否同源</th></tr></thead><tbody><tr><td>http://www.baidu.com</td><td>http://www.baidu.com/news</td><td>✅</td></tr><tr><td>https://www.baidu.com</td><td>http://www.baidu.com</td><td>❌</td></tr><tr><td>http://localhost:5000</td><td>http://localhost:7000</td><td>❌</td></tr><tr><td>http://localhost:5000</td><td>http://127.0.0.1:5000</td><td>❌</td></tr><tr><td>http://www.baidu.com</td><td>http://baidu.com</td><td>❌</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p><strong>同源策略是指，若页面的源和页面运行过程中加载的源不一致时，出于安全考虑，浏览器会对跨域的资源访问进行一些限制</strong></p><p><img src="http://mdrs.yuanjin.tech/img/20210916104747.png" alt="image-20210916104747296"></p><p>同源策略对 ajax 的跨域限制的最为<em>凶狠</em>，默认情况下，它不允许 ajax 访问跨域资源</p><p><img src="http://mdrs.yuanjin.tech/img/20210916105741.png" alt="image-20210916105741041"></p><p>所以，我们通常所说的跨域问题，就是同源策略对 ajax 产生的影响</p><p>有多种方式解决跨域问题，常见的有：</p><ul><li><strong>代理</strong>，常用</li><li><strong>CORS</strong>，常用</li><li>JSONP</li></ul><p>无论使用哪一种方式，都是要让浏览器知道，我这次跨域请求的是自己人，就不要拦截了。</p>',12)]))}const l=d(o,[["render",i],["__file","07_同源策略.html.vue"]]),s=JSON.parse('{"path":"/interview/network/07_%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"createdTime":1753164176000,"updatedTime":1753164176000,"contributors":[{"name":"三月崽崽","email":"1745786806@qq.com","commits":1}]},"readingTime":{"minutes":0.87,"words":262},"filePathRelative":"interview/network/07_同源策略.md","localizedDate":"2025年7月22日"}');export{l as comp,s as data};
