import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as e,e as t,o as r}from"./app-Cw3dfNnn.js";const c={};function l(s,o){return r(),i("div",null,o[0]||(o[0]=[e("h1",{id:"面试题",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#面试题"},[e("span",null,"面试题")])],-1),e("p",null,"cookie/sessionStorage/localStorage 的区别",-1),e("blockquote",null,[e("p",null,"参考答案："),e("p",null,"cookie、sessionStorage、localStorage 都是保存本地数据的方式"),e("p",null,[t("其中，cookie 兼容性较好，所有浏览器均支持。浏览器针对 cookie 会有一些默认行为，比如当响应头中出现"),e("code",null,"set-cookie"),t("字段时，浏览器会自动保存 cookie 的值；再比如，浏览器发送请求时，会附带匹配的 cookie 到请求头中。这些默认行为，使得 cookie 长期以来担任着维持登录状态的责任。与此同时，也正是因为浏览器的默认行为，给了恶意攻击者可乘之机，CSRF 攻击就是一个典型的利用 cookie 的攻击方式。虽然 cookie 不断的改进，但前端仍然需要另一种更加安全的保存数据的方式")]),e("p",null,"HTML5 新增了 sessionStorage 和 localStorage，前者用于保存会话级别的数据，后者用于更持久的保存数据。浏览器针对它们没有任何默认行为，这样一来，就把保存数据、读取数据的工作交给了前端开发者，这就让恶意攻击者难以针对登录状态进行攻击。 cookie 的大小是有限制的，一般浏览器会限制同一个域下的 cookie 总量不超过 4KB，而 sessionStorage 和 localStorage 则拥有更大的空间，多数浏览器一般要求不超过 5MB~10MB cookie 会与 domain、path 关联，而 sessionStorage 和 localStorage 只与 domain 关联")],-1)]))}const k=a(c,[["render",l],["__file","04_cookie和strorage.html.vue"]]),d=JSON.parse('{"path":"/interview/network/04_cookie%E5%92%8Cstrorage.html","title":"面试题","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"createdTime":1753164176000,"updatedTime":1753164176000,"contributors":[{"name":"三月崽崽","email":"1745786806@qq.com","commits":1}]},"readingTime":{"minutes":1.23,"words":368},"filePathRelative":"interview/network/04_cookie和strorage.md","localizedDate":"2025年7月22日"}');export{k as comp,d as data};
